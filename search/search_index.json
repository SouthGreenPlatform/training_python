{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Python","text":""},{"location":"#course-overview","title":"Course overview","text":"<p> GitHub repository      17 - 20 April, 2023</p> <p>Python is a general-purpose programming language used in disparate fields and is becoming more and more popular for data science.</p>"},{"location":"#course-content-and-learning-outcomes","title":"Course content and learning outcomes","text":"<p>Introduction to programming using the Python language. At the end of this training participants will be able to write programs in Python and manipulate biological data and understand more complex programs written by others.</p> <p>The following points will be covered: Data structures (lists, dictionaries) Data typing Control structures (conditions and loops) Functions Writing rules Practical application of writing and executing programs Management of options and creation/edition of files Regular expressions Reading/writing bioinformatics files (csv, fasta, sam...) BONUS: Create your own functions Introduction to Pandas</p>"},{"location":"#application","title":"Application","text":"<p>This is an SouthGreen course. The course is open for PhD students, postdocs, group leaders and core facility staff related to the SouthGreen Platform (IRD, CIRAD, INRAE and the Alliance Bioversity international-CIAT).</p> <p>If we receive more applications than we can accommodate, participants will be selected based on several criteria. Selection criteria include correct entry requirements, motivation to attend the course. We also take in consideration a balance between the different institute and department.</p> <p>Please note that SouthGreen training events do not provide any formal university credits. The training content is estimated to correspond to a certain number of credits, however the estimated credits are just guidelines. If formal credits are crucial, the student needs to confer with the home department before submitting a course application in order to establish whether the course is valid for formal credits or not.</p>"},{"location":"#prerequisites","title":"Prerequisites:","text":"<p>The course is aimed at complete beginners and assumes no prior programming experience.</p> <p>By accepting to participate in the course, you agree to follow the Code of Conduct.</p>"},{"location":"#schedule","title":"Schedule","text":"<p>You can find the course schedule at this page.</p>"},{"location":"#location","title":"Location","text":"<p>This course round is given on site. More information can be found at this page.</p>"},{"location":"#course-material","title":"Course material","text":"<p>The pre-course setup page lists all the information you need before the course starts. The most important part is the installation and setup of all the tools used in the course, so make sure you've gone through it all for the course start.</p>"},{"location":"#teachers","title":"Teachers","text":"<ul> <li>Sebastien Ravel (course leader)</li> <li>Floriant Charriat</li> <li>Antoni Exbrayat</li> <li>Jacques Dainat </li> </ul>"},{"location":"#contact","title":"Contact","text":"<p>To contact us, please send a mail using the contact form available here.</p>"},{"location":"pages/biopython/","title":"Biopython","text":"<p>Librairie contenant un ensemble d'objets et de fonctions d\u00e9di\u00e9s \u00e0 la manipulation des donn\u00e9es de biologie mol\u00e9culaire  </p> <ul> <li><code>Lecture et \u00e9criture</code> de fichiers (fasta/q, genbank\u2026)</li> <li><code>Interrogation</code> directe des <code>bases de donn\u00e9es</code> (NCBI\u2026)</li> <li><code>Lancement</code> simplifi\u00e9 <code>d'outils</code> usuels (Blast, Clustal\u2026)</li> </ul> <p>Importer les objets Biopython :  </p> <pre><code>from Bio.Seq import Seq, SeqRecord      # Objets S\u00e9quence\nfrom Bio import SeqIO                   # Entr\u00e9e Sortie S\u00e9quence\nfrom Bio import AlignIO                 # Entr\u00e9e/Sortie Alignements\n</code></pre>"},{"location":"pages/biopython/#sequences","title":"S\u00e9quences","text":"<p>Objet <code>Seq</code> : s\u00e9quence (suite de bases) + alphabet</p> <p>L'alphabet d\u00e9finit le type de la s\u00e9quence : ADN, Prot\u00e9ine, ARN... </p> <pre><code>from Bio import Seq\nma_sequence = Seq(\"ATTGCGCGAG\")\n</code></pre> <p></p> <p>Parfois utile de sp\u00e9cifier l'alphabet : <code>DNAAlphabet()</code>, <code>ProteinAlphabet()</code>, <code>RNAAlphabet()</code></p> <pre><code>from Bio.Seq import Seq\nfrom Bio.Alphabet import ProteinAlphabet\nma_sequence = Seq(\"ACGHA\", ProteinAlphabet())\n</code></pre> <p>L'object <code>Seq</code> se comporte comme une cha\u00eene de caract\u00e8res  (= liste non modifiable)</p> <ul> <li> <p>Ajout avec <code>+</code> <pre><code>ma_sequence = ma_sequence + \"TATATA\"\n</code></pre></p> </li> <li> <p>Test d'appartenance avec <code>in</code> <pre><code>if \"ATG\" in ma_sequence\n</code></pre>     Au d\u00e9but et \u00e0 la fin     <pre><code>if ma_sequence.startswith(\"ATG\")\nif ma_sequence.endswith(\"TAA\")\n</code></pre></p> </li> <li> <p>Acc\u00e8s aux bases avec [ ] (index \u00e0 partir de 0 !)     <pre><code>print(ma_sequence[0])\n</code></pre></p> </li> <li> <p>Longueur     <pre><code>len(ma_sequence)\n</code></pre></p> </li> <li> <p>Position d'une sous-cha\u00eene     <pre><code>pos = ma_sequence.find(\"ATG\")\n</code></pre></p> </li> <li> <p>Nombre d'occurrences d'un \u00e9l\u00e9ment (sans superpositions)     <pre><code>nombre_a = ma_sequence.count(\"A\")\n</code></pre></p> </li> </ul> <p><code>Seq</code> fournit aussi des fonctions sp\u00e9cifiques :  </p> <ul> <li> <p>Compl\u00e9ment inverse     <pre><code>rev_compl = ma_sequence.reverse_complement()\n</code></pre></p> </li> <li> <p>Traduction     <pre><code>ma_proteine = ma_seq.translate()\n</code></pre></p> </li> </ul>"},{"location":"pages/biopython/#seqrecord","title":"SeqRecord","text":"<p>Objet <code>SeqRecord</code> : <code>Seq</code> + identifiants + description + informations optionnelles (annotations et features)</p> <pre><code>from Bio.SeqRecord import SeqRecord\n</code></pre> <p>Attributs :  </p> <ul> <li><code>.seq</code> : objet <code>Seq</code></li> <li><code>.id</code> : identifiant</li> <li><code>.name</code> : nom commun, par ex. accession</li> <li><code>.description</code> : la description</li> <li><code>.letter_annotations</code> : dictionnaire des annotations par lettre (qualit\u00e9s\u2026)</li> <li><code>.annotations</code> : dictionnaire des annotations (keywords, comments\u2026)</li> <li><code>.features</code> : liste de SeqFeature</li> <li><code>.dbxrefs</code> : cross-r\u00e9f\u00e9rences aux bases de donn\u00e9es</li> </ul> <pre><code>from Bio.Seq import Seq\nfrom Bio.SeqRecord import SeqRecord\nmon_record = SeqRecord(Seq(\"ATAGC\"), id=\"mySeq\", description=\"test\")\nmon_record.name = \"maSeq\"\n</code></pre>"},{"location":"pages/biopython/#seqio","title":"SeqIO","text":"<p><code>SeqIO</code> : Ensemble de fonctions pour la lecture et \u00e9criture de s\u00e9quences sous diff\u00e9rents formats (fasta/q, GenBank, EMBL\u2026)</p> <pre><code>from Bio import SeqIO\n</code></pre> <p>Les fonctions de <code>SeqIO</code> retournent des objets <code>SeqRecord</code></p>"},{"location":"pages/biopython/#lecture","title":"Lecture","text":"<ul> <li> <p>Lire un fichier avec UNE s\u00e9quence : </p> <pre><code>SeqIO.read(chemin/objet fichier, format)\n</code></pre> <pre><code>from Bio import SeqIO\nmon_record = SeqIO.read(\"seq.fasta\", \"fasta\")\n</code></pre> <p>Renvoie un <code>SeqRecord</code></p> </li> <li> <p>Lire un fichier avec PLUSIEURS s\u00e9quences :  </p> <pre><code>SeqIO.parse(chemin/objet fichier, format)\n</code></pre> <p>Renvoie un it\u00e9rateur de <code>SeqRecord</code></p> <pre><code>from Bio import SeqIO\nrecords = SeqIO.parse(chemin/objet fichier, format)\nfor mon_record in records:\n    print(mon_record.id)\n</code></pre> <p>Warning</p> <p>attention : on ne peut parcourir l'it\u00e9rateur qu'une seule fois</p> <p>R\u00e9cup\u00e9rer toutes les s\u00e9quences dans une liste : <pre><code>liste_records = list(SeqIO.parse(chemin, format)\n</code></pre></p> <p>R\u00e9cup\u00e9rer toutes les s\u00e9quences dans un dictionnaire dont les cl\u00e9s sont les id des SeqRecord : <pre><code>dico_records = SeqIO.to_dict(SeqIO.parse(chemin, format))\n</code></pre></p> </li> </ul>"},{"location":"pages/biopython/#ecriture","title":"Ecriture","text":"<p>Obtenir une s\u00e9quence dans un format choisi \u00e0 partir d'un <code>SeqRecord</code> :  </p> <pre><code>record.format(format)\n</code></pre> <p>\u00c9crire un <code>SeqRecord</code> dans un fichier :  </p> <pre><code>fd.write(record.format(\"fasta\"))\n</code></pre> <p>\u00c9crire un ensemble de <code>SeqRecord</code> dans un fichier :  </p> <pre><code>SeqIO.write(liste_seqrecords, chemin, format)\n</code></pre>"},{"location":"pages/biopython/#conversion","title":"Conversion","text":"<p>Convertir des s\u00e9quences d'un format \u00e0 un autre directement</p> <pre><code>SeqIO.convert(chemin_in, format_in, chemin_out, format_out)\n</code></pre> <p>(Renvoie le nombre de s\u00e9quences converties)</p>"},{"location":"pages/biopython/#pratique-8","title":"Pratique 8","text":"<p>On va travailler sur le fichier GenBank sequence.gb</p>"},{"location":"pages/biopython/#exercice-a","title":"Exercice A","text":"<p>Cr\u00e9er un programme python <code>exo8_a.py</code> qui prend en argument (param\u00e8tre) le fichier de s\u00e9quences au format Genbank et qui cr\u00e9e un nouveau fichier avec les s\u00e9quences converties au format fasta.</p>"},{"location":"pages/biopython/#exercice-b","title":"Exercice B","text":"<p>Cr\u00e9er un programme python <code>exo8_b.py</code> qui prend en argument (param\u00e8tre) le fichier de s\u00e9quences au format Genbank et qui donne la longueur de chaque s\u00e9quence en \u00e9crivant \u00e0 l'\u00e9cran pour chaque s\u00e9quence : \"La s\u00e9quence ... a pour longueur ... \"</p>"},{"location":"pages/biopython/#exercice-c","title":"Exercice C","text":"<p>Cr\u00e9er un programme python <code>exo8_c.py</code> qui prend en argument (param\u00e8tre) le fichier de s\u00e9quences au format Genbank et qui cr\u00e9e deux nouveaux fichiers, un avec le compl\u00e9ment inverse des s\u00e9quences au format fasta et un avec les s\u00e9quences traduites en s\u00e9quences prot\u00e9iques au format fasta.</p>"},{"location":"pages/biopython_api/","title":"Biopython API","text":""},{"location":"pages/biopython_api/#recuperer-des-sequences","title":"R\u00e9cup\u00e9rer des S\u00e9quences","text":"<p>Interroger les bases de donn\u00e9es et t\u00e9l\u00e9charger des s\u00e9quences Ici on s'int\u00e9resse au BDD du NCBI (ex portail Entrez)</p> <pre><code>from Bio import Entrez\n</code></pre> <p>Important : pr\u00e9ciser un email (conditions d'utilisation du NCBI)</p> <pre><code>Entrez.email = \"votre@email.fr\"\n</code></pre> <ol> <li> <p>Effectuer une requ\u00eate sur une base de donn\u00e9es</p> <pre><code>fic_XML = Entrez.esearch(db=nom_db, term=requete, \u2026)\n</code></pre> <p>Renvoie le r\u00e9sultat sous la forme d'un fichier XML ouvert</p> </li> <li> <p>Parser le r\u00e9sultat dans un dictionnaire</p> <pre><code>dic_resultat = Entrez.read(fic_XML)\n</code></pre> <p>Identifiants des s\u00e9quences : <code>dico_resultat[\"IdList\"]</code></p> </li> <li> <p>T\u00e9l\u00e9charger les s\u00e9quences \u00e0 partir des identifiants</p> <pre><code>fic_sequences = Entrez.efetch(\n    db=nom_db,\n    id=dic_resultat[\"IdList\"],\n    rettype=format\n)\n</code></pre> <p>Renvoie un objet fichier ouvert, \u00e0 lire avec SeqIO.read() ou SeqIO.parse().</p> </li> <li> <p>Penser \u00e0 fermer les fichiers une fois qu'on a fini</p> <pre><code>fic_XML.close()\nfic_sequences.close()\n</code></pre> </li> </ol>"},{"location":"pages/biopython_api/#documentation","title":"Documentation","text":"<p>Quelques liens utiles pour utiliser Biopython</p> <ul> <li> <p>Cookbook : tutoriaux sur les diff\u00e9rents composants https://biopython.org/DIST/docs/tutorial/Tutorial.html https://biopython.org/wiki/Category%3ACookbook</p> </li> <li> <p>API documentation : documentation compl\u00e8te de tous les objets et fonctions http://biopython.org/DIST/docs/api/</p> </li> <li> <p>Un article/tutoriel en fran\u00e7ais https://connect.ed-diamond.com/GNU-Linux-Magazine/GLMFHS-073/La-bioinformatique-avec-Biopython</p> </li> </ul>"},{"location":"pages/biopython_api/#pratique-9","title":"Pratique 9","text":""},{"location":"pages/biopython_api/#exercice-a","title":"Exercice A","text":"<p>Cr\u00e9er un programme python <code>exo9_a.py</code> qui permet de r\u00e9cup\u00e9rer dans la banque de donn\u00e9es Protein du NCBI les s\u00e9quences du g\u00e8ne SRY (<code>SRY [gene]</code>) de l'homme (<code>Homo sapiens[Orgn]</code>) et qui cr\u00e9e un fichier r\u00e9sultat avec les s\u00e9quences au format Genbank (option <code>rettype=\"gb\"</code> de la fonction <code>efetch()</code>). Vous limiterez votre recherche aux 10 premi\u00e8res entr\u00e9es de la banque (option <code>retmax</code> de la fonction <code>esearch()</code>).</p>"},{"location":"pages/biopython_api/#exercice-b","title":"Exercice B","text":"<p>Cr\u00e9er un programme python <code>exo9_b.py</code> qui permet de faire la m\u00eame chose que le programme pr\u00e9c\u00e9dent mais qui fait en sorte que le nom de la banque de donn\u00e9es du NCBI, le nom du g\u00e8ne et de l'organisme, ainsi que le nom de fichier r\u00e9sultat soient donn\u00e9s en argument \u00e0 votre programme.</p>"},{"location":"pages/biopython_api/#exercice-c","title":"Exercice C","text":"<p>Cr\u00e9er un programme python <code>exo9_c.py</code> qui \u00e0 partir de 15 s\u00e9quences d'un g\u00e8ne (donn\u00e9 par l'utilisateur en argument) r\u00e9cup\u00e9r\u00e9es sur une banque du NCBI  (donn\u00e9e par l'utilisateur en argument) affiche \u00e0 l'\u00e9cran pour chaque s\u00e9quence : \u00ab s\u00e9quence nom_sequence de longueur lg_sequence \u00bb</p> <p>Par exemple voil\u00e0 l'affichage pour les 3 premi\u00e8res s\u00e9quences r\u00e9cup\u00e9r\u00e9es pour le g\u00e8ne SRY dans la banque Protein du NCBI : <pre><code>sequence EDW99052 de longueur 530\nsequence EDL09053 de longueur 395\nsequence EAX02769 de longueur 204\n</code></pre></p>"},{"location":"pages/boucles/","title":"Boucles","text":"<p>On peut avoir besoin de r\u00e9p\u00e9ter une action (un bloc de code) plusieurs fois</p> <p>Exemples: * Afficher chaque \u00e9l\u00e9ment d'une liste * Tant que vous n'aurez pas compris les boucles, je r\u00e9\u00e9expliquerai</p> <p>Pour cela on va \"boucler\".</p> <p>Deux structure it\u00e9ratives : Pour (<code>for</code>) et Tant que (<code>while</code>)</p>"},{"location":"pages/boucles/#while-tant-que","title":"while (TANT QUE)","text":"<p>Tant que la condition est vraie, le bloc de code est ex\u00e9cut\u00e9</p> <p></p> <p>Warning</p> <p>Le bloc d'instructions doit modifier la valeur de l'expression conditionnelle, sinon boucle infinie ! (rappel : <code>CTRL+C</code> pour arr\u00eater un programme bloqu\u00e9 dans une boucle infinie)</p> <p></p>"},{"location":"pages/boucles/#for-pour","title":"for (POUR)","text":"<p>Pour chaque \u00e9l\u00e9ment d'un it\u00e9rable, ex\u00e9cuter un bloc de code (une liste est un exemple d'it\u00e9rable)</p> <p></p> <pre><code>animaux = [\"Lion\", \"Ch\u00e8vre\", \"Vache\"]\nfor animal in animaux:\n    print(animal)\n</code></pre> <p>Tip</p> <p>Astuce : avoir en m\u00eame temps la position et la valeur de l'\u00e9l\u00e9ment <pre><code>for position, element in enumerate(iterable):\n    print(f\"Position {position} : {element}\")\n</code></pre></p> <p>Warning</p> <p>Ne pas modifier la liste sur laquelle on boucle !</p>"},{"location":"pages/boucles/#range","title":"range","text":"<p>Si on veut it\u00e9rer sur un nombre croissant, on peut utiliser <code>range</code> :</p> <pre><code>range(fin)              # Entiers de 0 \u00e0 fin - 1\nrange(d\u00e9but, fin)       # Entiers de d\u00e9but \u00e0 fin - 1\nrange(d\u00e9but, fin, pas)  # Entiers de d\u00e9but \u00e0 fin - 1 tous les pas\n</code></pre> <p>Exemple</p> <p>nombres pairs entre 2 et 12 :  <pre><code>for i in range(2, 14, 2):\n    print(i)\n</code></pre></p>"},{"location":"pages/boucles/#interuptions","title":"interuptions","text":"<p>Deux instructions qui permettent d'interrompre une boucle pr\u00e9matur\u00e9ment :</p> <ul> <li><code>continue</code> arr\u00eate l'ex\u00e9cution de l'it\u00e9ration en cours et <code>passe \u00e0 l'it\u00e9ration suivante</code> =&gt; utile si on veut ignorer une variable particuli\u00e8re et passer directement \u00e0 la suivante</li> </ul> <p></p> <ul> <li><code>break</code> arr\u00eate l'ex\u00e9cution de l'it\u00e9ration en cours et sort de la boucle =&gt; utile par exemple si on cherche quelque chose et qu'on l'a trouv\u00e9</li> </ul> <p></p>"},{"location":"pages/classes/","title":"Classes","text":""},{"location":"pages/classes/#un-type-specifique-les-classesobjets","title":"Un type sp\u00e9cifique : les classes/objets","text":"<p>Les classes sont les principaux outils de la programmation orient\u00e9e objet.</p> <p>Une classe peut comporter :  </p> <ul> <li>Des variables, appel\u00e9es attributs</li> <li>Des fonctions, appel\u00e9es m\u00e9thodes</li> </ul> <p>Une instance d'une classe est un objet </p> <p>On peut appeler les attributs d'un objet en utilisant le <code>.</code> :  <pre><code>objet.attribut = 4  \n</code></pre></p> <pre><code>objet.m\u00e9thode()\n</code></pre> <p><pre><code>chaine = \"Bonjour\"\n</code></pre> la variable <code>chaine</code> est en r\u00e9alit\u00e9 une instance de la classe <code>str</code>.</p> <p>Important</p> <p>Tous les types en python sont des objets</p>"},{"location":"pages/classes/#examiner-les-objets-obtenir-de-laide-sur","title":"Examiner les objets / Obtenir de l\u2019aide sur ...","text":"<p><code>help(obj)</code> : Affiche la documentation. Fonctionne sur les modules, les objets et les fonctions. Raccourci sur IPython : <code>?obj</code> </p> <p><code>dir(obj)</code> : retourne la liste des attributs et m\u00e9thodes de la classe de l\u2019objet </p> <pre><code>&gt;&gt;&gt; dir(\"\")\n[ 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format',\n 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower',\n 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans',\n 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith',\n 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']\n</code></pre>"},{"location":"pages/dictionnaires/","title":"Dictionnaires","text":"<p>Un dictionnaire est une structure de donn\u00e9es qui contient une collection non ordonn\u00e9e (pas d'indice) de couples cl\u00e9/valeur (pouvant \u00eatre de types diff\u00e9rents)</p>"},{"location":"pages/dictionnaires/#dictionnaires","title":"Dictionnaires","text":"<p>D\u00e9clarer un dictionnaire</p> <pre><code>dico = {cle1: valeur1, cle2: valeur2, \u2026}\ndico_vide = {}\n</code></pre> <p>On acc\u00e8de aux valeurs d'un dictionnaire par ses cl\u00e9s</p> <pre><code>dico[cle]\n</code></pre> <p>Liste des cl\u00e9s d'un dictionnaire : <code>dico.keys()</code> Liste des valeurs d'un dictionnaire : <code>dico.values()</code> Liste des couples cl\u00e9/valeur d'un dictionnaire : <code>dico.items()</code> </p> <p>Note</p> <p>Les liste retourn\u00e9 se comportent presque comme des listes mais n'en sont pas tout \u00e0 fait. On peut obtenir une vraie liste en faisant :  <code>list(dico.keys())</code></p> <pre><code>for cle, valeur in dico.items():\n    print(f\"La cl\u00e9 {cle} contient {valeur}\")\n</code></pre> <p>Longueur (nb. de couples) d'un dictionnaire</p> <pre><code>len(dico)\n</code></pre> <p>Note</p> <p><code>len</code> fonctionne sur beaucoup de types qui ont une longueur : <code>str</code>, <code>list</code>, <code>tuple</code>, <code>dict</code>, <code>set</code>, <code>range</code>\u2026 </p> <p>Tester l'existence d'une cl\u00e9 <pre><code>if cle in dico      #retourne True si la cl\u00e9 existe\n</code></pre></p> <p>Modifier une valeur ou Ajouter un couple (selon si la cl\u00e9 existe ou pas) <pre><code>dico[cle] = valeur\n</code></pre></p> <p>Supprimer un couple <pre><code>del dico[cle]\n</code></pre></p> <p>Vider un dictionnaire <pre><code>dico.clear()\n</code></pre></p>"},{"location":"pages/dictionnaires/#pratique-7","title":"Pratique 7","text":""},{"location":"pages/dictionnaires/#exercice-a","title":"Exercice A","text":"<p>Cr\u00e9er un programme python <code>exo7_a.py</code> qui cr\u00e9er un dictionnaire associant \u00e0 chaque base de l'ADN la chaine \"purinique\" (C et G) ou \"pyrimidinique\" (A et T) selon la base : puis qui demande \u00e0 l'utilisateur (fonction <code>input()</code>) d'entrer une base,  et enfin qui affiche si la base entr\u00e9e par l'utilisateur est purinique ou pyrimidique.</p>"},{"location":"pages/dictionnaires/#exercice-b","title":"Exercice B","text":"<p>En utilisant un dictionnaire et la fonction <code>in</code> (clef in dictionnaire), cr\u00e9er un programme python <code>exo7_b.py</code> qui stocke dans un dictionnaire le nombre d\u2019occurrences de chaque acide amin\u00e9 de la s\u00e9quence <code>AGWPSGGASAGLAILWGASAIMPGALW</code>, puis afficher ce dictionnaire.  </p> <p>Votre programme doit afficher :  </p> <pre><code>{'P': 2, 'I': 2, 'W': 3, 'G': 6, 'L': 3, 'A': 7, 'M': 1, 'S': 3}\n</code></pre>"},{"location":"pages/dictionnaires/#exercice-c","title":"Exercice C","text":"<p>Voila un dictionnaire faisant correspondre \u00e0 chaque esp\u00e8ce la longueur de son g\u00e9nome : </p> <pre><code>dico_espece = {'Escherichia coli':3.6,'Homo sapiens':3200,'Saccharomyces cerevisae':12,'Arabidopsis thaliana':125}\n</code></pre> <p>Cr\u00e9er un programme python <code>exo7_c.py</code> dans lequel vous cr\u00e9ez ce dictionnaire et qui permet d'afficher le nom de l'organisme poss\u00e9dant le plus grand g\u00e9nome.</p>"},{"location":"pages/dictionnaires/#exercice-d","title":"Exercice D","text":"<p>Le fichier sequences_especes.tsv est un fichier tabul\u00e9 (2 colonnes s\u00e9par\u00e9es par des tabulations) contenant un identifiant de s\u00e9quence dans la premi\u00e8re colonne, et l\u2019esp\u00e8ce associ\u00e9e dans la secondes colonne.  <pre><code>Homo sapiens    27292\nSaccharomyces cerevisiae S288C  850883\nHomo sapiens    55226\nMus musculus    19791\n</code></pre></p> <p>Cr\u00e9ez un script <code>exo7_d.py</code> qui lit ce fichier et, \u00e0 l\u2019aide d\u2019un dictionnaire, \u00e9crit un fichier de sortie qui contient le nom d\u2019une esp\u00e8ce pr\u00e9c\u00e9d\u00e9 d\u2019un di\u00e8ze sur une ligne puis tous les identifiants de s\u00e9quence associ\u00e9s \u00e0 cette esp\u00e8ce sur les lignes suivantes.</p> <pre><code># Homo sapiens\n27292\n55226\n....\n# Saccharomyces cerevisiae S288C\n850883\n....\n</code></pre>"},{"location":"pages/ending/","title":"Ending","text":""},{"location":"pages/entree-sortie/","title":"Entree sortie","text":""},{"location":"pages/entree-sortie/#entreessorties-en-console","title":"Entr\u00e9es/sorties en console","text":"<p>Afficher du texte et des variables :  print()</p> <p>nom = \u201cSebastien\" print(\"Bonjour\"\\, nom) (print ajoute un espace entre les \u00e9l\u00e9ments automatiquement. Modifiable avec le param\u00e8tre \"sep\")</p> <p>R\u00e9cup\u00e9rer une information saisie par l'utilisateur :  input()</p> <p>nom = input(\"Quel est votre nom ? \")</p>"},{"location":"pages/entree-sortie/#entreessorties-affichage-formate","title":"Entr\u00e9es/sorties &gt; Affichage format\u00e9","text":"<p>Formatage  : Int\u00e9grer des variables dans une cha\u00eene de caract\u00e8res\\, en contr\u00f4lant la mani\u00e8re dont elles s'affichent</p> <p>Fonction format() valeur = 34.67644 print(\"La valeur est {} !\".format(valeur))</p> <p>f-strings M\u00eame syntaxe que format\\, affiche les variables sans avoir \u00e0 les passer en param\u00e8tre valeur = 34.67644 print(f\"La valeur est {valeur} !\") print(f\"La valeur arrondi est {valeur:.2f} !\")</p> <p> (op\u00e9rateur % : ancienne syntaxe) </p> <p> !   Python &gt;= 3.6 </p>"},{"location":"pages/fichiers/","title":"Fichiers","text":"<p>Souvent en bioinfo, on doit lire ou \u00e9crire des fichiers</p> <p>Ouvrir un fichier :  </p> <pre><code>fd = open(\"nom_du_fichier\", \"mode d'ouverture\")\n</code></pre> <p>Modes d'ouverture :  </p> <ul> <li><code>r</code> pour lecture</li> <li><code>w</code> pour \u00e9criture, \u00e9crase le fichier si il existe d\u00e9j\u00e0</li> <li><code>a</code> pour \u00e9criture, ajoute \u00e0 la fin du fichier si il existe d\u00e9j\u00e0</li> <li><code>x</code> pour \u00e9criture, \u00e9choue si le fichier existe d\u00e9j\u00e0</li> </ul> <p>Python traite les fichiers comme des fichiers texte par d\u00e9faut (encodage utf-8)</p> <p><code>fd</code> est un objet repr\u00e9sentant le fichier ouvert sur lequel on peut appeler des fonctions pour manipuler le fichier.</p> <p>Une fois les manipulations finies, on doit imp\u00e9rativement fermer le fichier !</p> <pre><code>fd = open(\"fichier.txt\", \"r\")\n# ici instructions utilisant le fichier\u2026\nfd.close()\n# ici on ne peut plus utiliser fd\n</code></pre>"},{"location":"pages/fichiers/#lecture","title":"Lecture","text":"<p>Lecture du fichier (fichier ouvert en mode <code>r</code>) Le fichier a un curseur qui avance \u00e0 chaque op\u00e9ration de lecture.  </p> <p>Lire tout le fichier comme cha\u00eene de caract\u00e8res     <pre><code>chaine = fd.read()\n</code></pre></p> <p>Lire n caract\u00e8res du fichier comme cha\u00eene de caract\u00e8res     <pre><code>chaine = fd.read(n)\n</code></pre></p> <p>Lire une ligne du fichier comme cha\u00eene de caract\u00e8res     <pre><code>ligne = fd.readline()\n</code></pre></p> <p>Lire toutes les lignes du fichier dans une liste     <pre><code>lignes = fd.readlines()\n</code></pre></p> <p>Pour revenir au d\u00e9but : <code>fd.seek(0)</code></p> <p>Lire le fichier ligne par ligne avec une boucle (\u00c9quivalent d'une boucle utilisant <code>fd.readline()</code>)</p> <pre><code>for ligne in fd:\n    print(ligne)\n</code></pre> <p>La boucle utilise le curseur du fichier de la m\u00eame mani\u00e8re que les autres fonctions !</p> <p>Warning</p> <p>Les lignes lues par <code>readline()</code>, <code>readlines()</code> et la boucle <code>for</code> contiennent les sauts de ligne (<code>\\n</code>). </p>"},{"location":"pages/fichiers/#ecriture","title":"Ecriture","text":"<p>\u00c9criture dans un fichier (fichier ouvert en mode <code>w</code>, <code>a</code> ou <code>x</code>)</p> <ul> <li> <p>\u00c9crire une cha\u00eene de caract\u00e8res : </p> <pre><code>fd.write(chaine)\n</code></pre> <p>Warning</p> <p>N'ajoute pas automatiquement le saut de ligne (\"\\n\")</p> </li> <li> <p>\u00c9crire plusieurs lignes (liste de cha\u00eenes de caract\u00e8re) : </p> <pre><code>fd.writelines(liste)\n</code></pre> <p>Warning</p> <p>N'ajoute pas non plus les sauts de ligne (\"\\n\")</p> </li> </ul>"},{"location":"pages/fichiers/#with","title":"With","text":"<p>Ouverture du fichier avec <code>with</code> : fermeture automatique </p> <p></p> <p>Fichier ferm\u00e9 automatiquement :  </p> <ul> <li>A la fin du bloc</li> <li>En cas d'erreur dans le bloc</li> </ul>"},{"location":"pages/fonctions/","title":"Fonctions","text":"<p>Les fonctions sont des blocs de code isol\u00e9s, qui peuvent \u00eatre appel\u00e9s depuis n'importe o\u00f9 dans votre code. </p> <p>Une fonction prend des arguments en entr\u00e9e, et peut renvoyer une valeur de retour en sortie.</p> <p>Syntaxe :</p> <pre><code>x = fonction(argument1, argument2)\n</code></pre> <p>On peut appeler une fonction un nombre illimit\u00e9 de fois. Une fonction peut elle-m\u00eame appeler d'autres fonctions.</p>"},{"location":"pages/introduction/","title":"Introduction","text":""},{"location":"pages/introduction/#introduction","title":"Introduction","text":""},{"location":"pages/introduction/#pourquoi-programmer-en-python","title":"Pourquoi programmer en Python ?","text":""},{"location":"pages/introduction/#quest-ce-quun-programme-ou-un-script","title":"Qu'est-ce qu'un programme ou un script ?","text":"<ul> <li> <p>Une suite d'instruction  que l'ordinateur doit ex\u00e9cuter</p> </li> <li> <p>=&gt; programmer = d\u00e9crire \u00e0 l'ordinateur tr\u00e8s clairement tout ce qu'il doit faire</p> </li> <li> <p>Un programme est d\u00e9crit par un  algorithme (= suite d'instructions)</p> </li> </ul>"},{"location":"pages/introduction/#pourquoi-apprendre-a-programmer","title":"Pourquoi apprendre \u00e0 programmer ?","text":"<ul> <li> <p>Faire travailler l'ordinateur \u00e0 notre place (calculs)</p> </li> <li> <p>Automatiser / encha\u00eener  des traitements (propos\u00e9s par des outils existant)</p> </li> <li> <p>Effectuer des t\u00e2ches qu'aucun outils existant ne propose</p> </li> </ul>"},{"location":"pages/introduction/#pourquoi-en-python","title":"Pourquoi en Python ?","text":"<ul> <li> <p>Un des langages le plus utilis\u00e9s en  bioinformatique  car ad\u00e9quat pour r\u00e9aliser des scripts, portables sur Unix/Mac et sur Windows</p> </li> <li> <p>Syntaxe du langage incite \u00e0 la clart\u00e9</p> </li> <li> <p>Langage interpr\u00e9t\u00e9 = programme traduit au fur et \u00e0 mesure par un interpr\u00e9teur  afin d\u2019\u00eatre ex\u00e9cut\u00e9e par l\u2019ordinateur</p> </li> <li> <p>Langage orient\u00e9 objet, moderne, haut niveau   =&gt;  Biopython  : ensemble de fonctions et proc\u00e9dures con\u00e7ues pour le traitement et l'analyse de donn\u00e9es biologiques</p> </li> </ul> <p>R\u00e9f\u00e9rence : http://python.developpez.com/tutoriels/cours-python-uni-paris7/</p>"},{"location":"pages/introduction/#premiers-pas","title":"Premiers pas","text":""},{"location":"pages/introduction/#mode-interactif-repl","title":"Mode interactif  (REPL)","text":"<p>Ex\u00e9cution d\u2019instructions simples, retour en direct Le plus souvent utilis\u00e9 :  ipython   (interpr\u00e9teur am\u00e9lior\u00e9)</p> <p> Sortir de l'interpr\u00e9teur avec la commande quit() / exit() ou Ctrl+d</p>"},{"location":"pages/introduction/#mode-programmation-script","title":"Mode programmation / script","text":"<p>ex\u00e9cution d'une suite d'instructions plus complexes \u00e9crites \u00e0 l'avance </p> <ul> <li>\u00c9crire les instructions dans un fichier  <code>script_python.py</code> ( <code>#</code> pour les commentaires)  </li> <li>Ex\u00e9cuter le script\u00a0:<ul> <li>Soit avec la commande\u00a0:  <code>python3 script_python.py</code></li> <li>Soit en rendant le fichier <code>script_python.py</code> \u00ab\u00a0 ex\u00e9cutable \u00a0\u00bb (qui doit l'interpr\u00e9ter):  <ul> <li>Ajouter en 1er ligne du fichier  <pre><code>#!/usr/bin/env python3\n</code></pre></li> <li>Changer les droits du fichier  <pre><code>chmod +x script_python.py\n</code></pre></li> <li>Lancer la commande\u00a0 <pre><code>./script_python.py\n</code></pre></li> </ul> </li> </ul> </li> </ul>"},{"location":"pages/introduction/#utilisation-de-nano-pour-editer-des-fichiers","title":"Utilisation de nano pour \u00e9diter des fichiers","text":"<p>nano :  \u00e9diteur de fichier  simple en ligne de commande. Install\u00e9 sur toutes les machines Linux.</p> <p><code>nano unfichier.py</code> pour  \u00e9diter un fichier existant  ou  cr\u00e9er un nouveau fichier</p> <p>Sauvegarder et quitter  : CTRL-X -&gt; O -&gt; Entr\u00e9e  </p> <p>Note</p> <p>Dans <code>nano</code> les raccourcis sont affich\u00e9s en bas de l'\u00e9cran</p> <p>Chez vous, vous voudrez probablement utiliser un \u00e9diteur plus complet (<code>vim</code>, <code>VS Code</code>, <code>Sublime Text</code>, \u2026) ou un IDE ( <code>PyCharm</code>, <code>Spyder</code>).</p>"},{"location":"pages/introduction/#pycharm","title":"PyCharm","text":""},{"location":"pages/introduction/#avantage-de-pycharm-pour-editer-des-fichiers-python","title":"Avantage de PyCharm pour \u00e9diter des fichiers python","text":"<ul> <li> <p>environnement de d\u00e9veloppement int\u00e9gr\u00e9 (IDE)  Utilisable sur Windows, Linux et Mac</p> </li> <li> <p>Utilise  l'auto compl\u00e9tion du code</p> </li> <li> <p>g\u00e8re l\u2019indentation du code</p> </li> <li> <p>Affiche des messages si erreur de syntaxe, propose les importations de librairie, analyse en temps r\u00e9el du code, \u2026</p> </li> </ul>"},{"location":"pages/introduction/#utiliser-python-avec-pycharm","title":"Utiliser Python avec PyCharm","text":"<ul> <li> <p>T\u00e9l\u00e9charger PyCharm :  https://www.jetbrains.com/fr-fr/pycharm/download/#section=linux</p> </li> <li> <p>Cr\u00e9er un nouveau projet (ex : formation_python)</p> </li> </ul> <p> </p> <ul> <li>Mode interactif  (REPL) Ex\u00e9cution d\u2019instructions simples, retour en direct</li> </ul> <p></p>"},{"location":"pages/listes/","title":"Listes","text":"<p>Liste : structure de donn\u00e9es contenant une s\u00e9rie de valeurs ordonn\u00e9es (possiblement de types diff\u00e9rents)</p> <pre><code>ma_liste = [1, \"deux\", 3.0]\nma_liste_vide = []\n</code></pre> <ul> <li>Appeler les \u00e9l\u00e9ments d'une liste :  </li> </ul> <p><code>ma_liste[0]</code>   premier \u00e9l\u00e9ment de la liste <code>ma_liste[1]</code>   second \u00e9l\u00e9ment de la liste</p> <p>Warning</p> <p>Les index commencent \u00e0 0 ! </p> <p>Note</p> <p><code>i</code>,<code>j</code>= positions dans la liste <code>x</code>= valeur</p> <ul> <li> <p>R\u00e9cup\u00e9rer la longueur d'une liste : <pre><code>len(ma_liste)\n</code></pre></p> </li> <li> <p>Prendre une tranche d'une liste : <pre><code>ma_liste[i:j]   # \u21d2 \u00e9l\u00e9ments de l'indice i \u00e0 l'indice j-1\nma_liste[i:]    # \u21d2 tous les \u00e9l\u00e9ments \u00e0 partir de l'indice i\nma_liste[:j]    # \u21d2 tous les \u00e9l\u00e9ments jusqu'\u00e0 l'indice j-1\nma_liste[:-1]   # \u21d2 tous les \u00e9l\u00e9ments sauf le dernier\nma_liste[-1]    # \u21d2 dernier \u00e9l\u00e9ment\n</code></pre></p> </li> <li> <p>Concat\u00e9ner des listes <pre><code>liste_1 + liste_2\n</code></pre></p> </li> <li> <p>Ajouter un \u00e9l\u00e9ment \u00e0 la fin d'une liste <pre><code>ma_liste.append(x)\n</code></pre></p> </li> <li> <p>Remplacer la valeur d'un \u00e9l\u00e9ment \u00e0 une position d\u00e9termin\u00e9e <pre><code>ma_liste[i] = x\n</code></pre></p> </li> <li> <p>Ins\u00e9rer un \u00e9l\u00e9ment \u00e0 une position d\u00e9termin\u00e9e <pre><code>ma_liste.insert(i, x)\n</code></pre></p> </li> <li> <p>Trier une liste en place <pre><code>ma_liste.sort()\n</code></pre></p> </li> <li> <p>Cr\u00e9er une copie tri\u00e9e d'une liste <pre><code>liste_triee = sorted(ma_liste)\n</code></pre></p> </li> <li> <p>Inverser une liste <pre><code>ma_liste.reverse()\n</code></pre></p> </li> <li> <p>Supprimer un \u00e9l\u00e9ment d'une liste <pre><code>del ma_liste[i]\nma_liste.remove(x)  # ne retire que la premi\u00e8re occurrence de x\n</code></pre></p> </li> <li> <p>Compter le nombre d'occurrences de x dans une liste <pre><code>ma_liste.count(x)\n</code></pre></p> </li> <li> <p>Tester si un \u00e9l\u00e9ment appartient ou pas \u00e0 une liste <pre><code>if x in ma_liste:\nif x not in ma_liste:\n</code></pre></p> </li> </ul> <p>Warning</p> <p>Toutes les recherches par valeur dans la liste sont en O(n) = de plus en plus lentes au fur et \u00e0 mesure que la taille de la liste augmente</p> <p>Une cha\u00eene de caract\u00e8res est une liste non modifiable <pre><code>sequence = \"ATGGCAT\"\nsequence[2] # =&gt; \"G\"\n</code></pre></p> <p>On peut cr\u00e9er une liste modifiable \u00e0 partir de la cha\u00eene <pre><code>liste_sequence = list(sequence)\n</code></pre></p> <p>Listes de listes <pre><code>liste = [[1, 2, 3], [4, 5, 6]]\nliste[0]        # =&gt; [1, 2, 3]\nliste[0][0]     # =&gt; 1\nliste[1][2]     # =&gt; 6\n</code></pre></p>"},{"location":"pages/manipulation_des_chaines_de_caracteres/","title":"Manipulation des cha\u00eenes de caract\u00e8res","text":""},{"location":"pages/manipulation_des_chaines_de_caracteres/#decouper","title":"D\u00e9couper","text":"<p>D\u00e9couper une cha\u00eene de caract\u00e8res en liste d'\u00e9l\u00e9ments (par d\u00e9faut, espaces et tabulations)</p> <pre><code>liste = chaine.split(separateur)\nanimaux = \"girafe tigre singe\"\nma_liste = animaux.split()\nprint(ma_liste)\n&gt;&gt;&gt; [\"girafe\", \"tigre\", \"singe\"]\n</code></pre> <p>D\u00e9couper une cha\u00eene de caract\u00e8res en liste d'\u00e9l\u00e9ments, en utilisant un s\u00e9parateur e.g. <code>;</code></p> <pre><code>liste = chaine.split(separateur)\nanimaux = \"girafe;tigre;singe\"\nma_liste = animaux.split(\";\")\nprint(ma_liste)\n&gt;&gt;&gt; [\"girafe\", \"tigre\", \"singe\"]\n</code></pre>"},{"location":"pages/manipulation_des_chaines_de_caracteres/#majusculeminuscule","title":"Majuscule/minuscule","text":"<p>Mettre en MAJUSCULE/minuscule <pre><code>chaine_majuscule = chaine.upper()\nchaine_mijuscule = chaine.lower()\nchaine_capitalisee = chaine.capitalize()\n</code></pre></p>"},{"location":"pages/manipulation_des_chaines_de_caracteres/#convertir","title":"Convertir","text":"<p>Convertir une liste de cha\u00eenes de caract\u00e8res en une seule cha\u00eene de caract\u00e8res</p> <pre><code>chaine = \"s\u00e9parateur\".join(liste)\nliste = [\"A\", \"T\", \"G\", \"CAAA\"]\nseq1 = \"-\".join(liste)  #=&gt; \"A-T-G-CAA\"\nseq2 = \"\".join(liste)   #=&gt; \"ATGCAA\"\nseq3 = \" \".join(liste)  #=&gt; \"A T G CAA\"\n</code></pre>"},{"location":"pages/manipulation_des_chaines_de_caracteres/#supprimer","title":"Supprimer","text":"<p>Supprimer certains caract\u00e8res (donn\u00e9s dans une chaine de caract\u00e8res) des extr\u00e9mit\u00e9s d'une cha\u00eene de caract\u00e8res (par d\u00e9faut : espaces, tabulations et sauts de ligne)</p> <ul> <li> <p>des deux c\u00f4t\u00e9s de la cha\u00eene (param\u00e8tres par d\u00e9faut): <pre><code>new_chaine = chaine.strip()\n</code></pre></p> </li> <li> <p>a l'extr\u00e9mit\u00e9 droite (retirera les <code>.</code> et les <code>;</code>): <pre><code>new_chaine = chaine.rstrip(\".;\")\n</code></pre></p> </li> <li> <p>a l'extr\u00e9mit\u00e9 gauche (retirera les espaces, les tabulations et les sauts de ligne):  <pre><code>new_chaine = chaine.lstrip(\" \\t\\n\")\n</code></pre></p> </li> </ul>"},{"location":"pages/modules/","title":"Modules","text":"<p>Python met \u00e0 disposition des modules qui contiennent des fonctions souvent utilis\u00e9es ou pour interagir avec le syst\u00e8me </p> <p>Note</p> <p>modules = biblioth\u00e8ques/librairies</p> <p>Utilisation d'un module :  </p> <ul> <li> <p>Installer le module si il n'est pas dans la librairie standard  <pre><code>python3 \u2013m pip install\n</code></pre></p> </li> <li> <p>Importer le module en d\u00e9but de programme <pre><code>import nom_module\n</code></pre></p> </li> <li> <p>Appeler un objet/une fonction d'un module <pre><code>nom_module.fonction()\n</code></pre></p> </li> <li> <p>Aide sur un module <pre><code>help(nom_module) #  sur IPython : ?nom_module\n</code></pre></p> </li> </ul> <p>Quelques modules de la librairie standard utiles :</p> <ul> <li><code>math</code> : fonctions et constantes math\u00e9matiques de base (sin, cos, exp, pi\u2026)</li> <li><code>random</code> : g\u00e9n\u00e9ration de l'al\u00e9atoire (nombres, choix\u2026)</li> <li><code>sys</code> : passage d'argument, gestion de l'entr\u00e9e/sortie standard\u2026</li> <li><code>os</code> : dialogue avec le syst\u00e8me d'exploitation (syst\u00e8me de fichiers, variables d'environnement\u2026)</li> <li><code>subprocess</code> : lancer d'autre programmes \u00e0 partir de Python</li> <li><code>re</code> : utilisation des expressions r\u00e9guli\u00e8res</li> <li><code>csv</code>, <code>json</code> : lecture et \u00e9criture des formats \u00e9ponymes</li> <li><code>pathlib</code> : gestion des chemins des fichiers et repertoires </li> </ul> <p>Note</p> <p>Tous les modules de la librairie standard et leur documentation : https://docs.python.org/3/library/index.html</p>"},{"location":"pages/modules_utiles/","title":"Modules utiles","text":""},{"location":"pages/modules_utiles/#modules-utiles","title":"Modules utiles","text":"<p>Dans la librairie standard (pr\u00e9install\u00e9s) :  </p> <ul> <li><code>math</code> : fonctions et constantes math\u00e9matiques de base (sin, cos, exp, pi\u2026)</li> <li><code>random</code> : g\u00e9n\u00e9ration de l'al\u00e9atoire (nombres, choix\u2026)</li> <li><code>sys</code> : passage d'argument, gestion de l'entr\u00e9e/sortie standard\u2026</li> <li><code>os</code> : dialogue avec le syst\u00e8me d'exploitation (syst\u00e8me de fichiers, variables d'environnement\u2026)</li> <li><code>subprocess</code> : lancer d'autre programmes \u00e0 partir de Python</li> <li><code>re</code> : utilisation des expressions r\u00e9guli\u00e8res</li> <li><code>csv</code>, <code>json</code> : lecture et \u00e9criture des formats \u00e9ponymes</li> <li><code>gzip</code> : ouverture de fichiers .gz</li> <li> <p><code>argparse</code> : gestion avanc\u00e9e des param\u00e8tres en ligne de commande</p> <p>Tous les modules de la librairie standard et leur documentation : https://docs.python.org/3/library/index.html</p> </li> </ul>"},{"location":"pages/modules_utiles/#modules-tiers-utiles","title":"Modules (tiers) utiles","text":"<ul> <li> <p>Calcul scientifique optimis\u00e9 (matrices, arrays, \u2026) : NumPy</p> </li> <li> <p>Manipuler les donn\u00e9es sous forme de DataFrames (tableaux) : pandas</p> </li> <li> <p>G\u00e9n\u00e9ration de graphiques : MatPlotLib (pyplot), Plotly     (plot interactif) </p> </li> <li> <p>Requ\u00eates HTTP (web) : requests</p> </li> </ul>"},{"location":"pages/modules_utiles/#quelques-librairies-tierces-utiles","title":"Quelques librairies tierces utiles","text":"<ul> <li> <p>Outils de machine learning/statistiques avanc\u00e9es : Scikit-learn</p> </li> <li> <p>R\u00e9seau : NetworkX</p> </li> <li> <p>Interpr\u00e9teur am\u00e9lior\u00e9 : IPython</p> </li> <li> <p>Notebooks interactifs \u00e0 la Rmarkdown: jupyter</p> </li> <li> <p>Parsing de formats de bioinformatique : </p> <p>FASTA, FASTQ, GB   (BLAST, formats d'alignement \u00e9sot\u00e9riques) : Biopython</p> <p>SAM, BAM, CRAM : pysam</p> <p>VCF : pyvcf</p> <p>GFF : GFFutils</p> </li> <li> <p>Visualisation : DNA Features Viewer</p> </li> </ul>"},{"location":"pages/panda/","title":"Panda","text":"<p>Tous les exemples de ce cours pour la partie  pandas  ont \u00e9t\u00e9 pris du cours de python de Patrick Fuchs et Pierre Poulain !!  https://python.sdv.univ-paris-diderot.fr/17_modules_interet_bioinfo/#174-module-pandas </p>"},{"location":"pages/panda/#series","title":"Series","text":"<p>Une <code>Serie</code> correspond \u00e0 un vecteur \u00e0 une dimension</p> <p>Syntaxe</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; s = pd.Series([10, 20, 30, 40], index = ['a', 'b', 'c', 'd'])\n&gt;&gt;&gt; s\na    10\nb    20\nc    30\nd    40\ndtype: int64\n</code></pre> <p>Chaque \u00e9l\u00e9ment de la s\u00e9rie de donn\u00e9es poss\u00e8de une \u00e9tiquette qui permet d'appeler les \u00e9l\u00e9ments :  </p> <pre><code>&gt;&gt;&gt; s[0]\n10\n&gt;&gt;&gt; s[\"a\"]\n10\n</code></pre> <p>on peut extraire plusieurs \u00e9l\u00e9ments, par leurs indices ou leurs \u00e9tiquettes :  </p> <pre><code>&gt;&gt;&gt; s[[1, 3]]\nb    20\nd    40\ndtype: int64\n</code></pre> <pre><code>&gt;&gt;&gt; s[[\"b\", \"d\"]]\nb    20\nd    40\ndtype: int64\n</code></pre> <p>Les \u00e9tiquettes permettent de modifier et d'ajouter des \u00e9l\u00e9ments :  </p> <pre><code>&gt;&gt;&gt; s[\"c\"] = 300\n&gt;&gt;&gt; s[\"z\"] = 50\n&gt;&gt;&gt; s\na     10\nb     20\nc    300\nd     40\nz     50\ndtype: int64\n</code></pre> <p>on peut filtrer une partie de la series :  </p> <pre><code>&gt;&gt;&gt; s[s&gt;30]\nc    300\nd     40\nz     50\ndtype: int64\n</code></pre> <p>et m\u00eame combiner plusieurs crit\u00e8res de s\u00e9lection :  </p> <pre><code>&gt;&gt;&gt; s[(s&gt;20) &amp; (s&lt;100)]\nd    40\nz    50\ndtype: int64\n</code></pre>"},{"location":"pages/panda/#dataframe","title":"Dataframe","text":"<p>Une <code>Dataframe</code> correspondent \u00e0 un tableaux \u00e0 deux dimensions avec des \u00e9tiquettes pour nommer les lignes et les colonnes.</p>"},{"location":"pages/panda/#creation","title":"Cr\u00e9ation","text":"<p>Voici comment cr\u00e9er un dataframe avec pandas \u00e0 partir de donn\u00e9es fournies comme liste de lignes : <pre><code>&gt;&gt;&gt; df = pd.DataFrame(columns=[\"a\", \"b\", \"c\", \"d\"],\n...                   index=[\"chat\", \"singe\", \"souris\"],\n...                   data=[np.arange(10, 14),\n...                         np.arange(20, 24),\n...                         np.arange(30, 34)])\n&gt;&gt;&gt; df\n         a   b   c   d\nchat    10  11  12  13\nsinge   20  21  22  23\nsouris  30  31  32  33\n</code></pre></p> <p>Le m\u00eame dataframe peut aussi \u00eatre cr\u00e9\u00e9 \u00e0 partir des valeurs fournies en colonnes sous la forme d'un dictionnaire :</p> <pre><code>&gt;&gt;&gt; data = {\"a\": np.arange(10, 40, 10),\n...         \"b\": np.arange(11, 40, 10),\n...         \"c\": np.arange(12, 40, 10),\n...         \"d\": np.arange(13, 40, 10)}\n&gt;&gt;&gt; df = pd.DataFrame(data)\n&gt;&gt;&gt; df.index = [\"chat\", \"singe\", \"souris\"]\n&gt;&gt;&gt; df\n         a   b   c   d\nchat    10  11  12  13\nsinge   20  21  22  23\nsouris  30  31  32  33\n</code></pre>"},{"location":"pages/panda/#creation-a-partir-dun-csv","title":"Cr\u00e9ation \u00e0 partir d'un csv","text":"<p>Une fonctionnalit\u00e9 tr\u00e8s int\u00e9ressante de pandas est d'ouvrir tr\u00e8s facilement un fichier au format .csv :</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; df = pd.read_csv(\"mon_fichier.csv\")\n\n&gt;&gt;&gt; df = pd.read_csv(\"mon_fichier.csv\", index_col=\"ID\")\n&gt;&gt;&gt; df.head()\n&gt;&gt;&gt; df.shape\n\n# quel est le type de c/colonne\n&gt;&gt;&gt; df.dtypes \n</code></pre>"},{"location":"pages/panda/#pratique-11-importer-un-fichier-csv-et-le-explorer","title":"Pratique 11 : importer un fichier csv et le explorer","text":"<p>Jupyter notebook</p> <p>Cr\u00e9er un programme python  <code>exo-pandas-explo.py</code>  qui prenne en input le fichier suivant:</p> <p>https://python.sdv.univ-paris-diderot.fr/data-files/transferrin_report.csv </p> <p>Lire le fichier avec  <code>pd.read_csv</code> et calculer quelques statistiques descriptives pour les donn\u00e9es num\u00e9riques avec la m\u00e9thode <code>.describe()</code>.</p> <p>La colonne \"Source\" contient des cha\u00eenes de caract\u00e8res, on peut rapidement d\u00e9terminer le nombre de prot\u00e9ines pour chaque organisme </p>"},{"location":"pages/panda/#dataframe-proprietes","title":"Dataframe Propriet\u00e9s","text":"<p>Les dimensions d'un dataframe sont donn\u00e9es par l'attribut <code>.shape</code> :</p> <pre><code>&gt;&gt;&gt; df.shape l'attribut\n(3, 4)\n</code></pre> <p>La m\u00e9thode <code>.head(n)</code> renvoie les n premi\u00e8res lignes du dataframe (par d\u00e9faut, n vaut 5) :</p> <pre><code>&gt;&gt;&gt; df.head(2)\n</code></pre> <p>L'attribut <code>.columns</code> renvoie le nom des colonnes et permet aussi de renommer les colonnes </p> <pre><code>&gt;&gt;&gt; df.columns\nIndex(['a', 'b', 'c', 'd'], dtype='object')\n&gt;&gt;&gt; df.columns = [\"Paris\", \"Lyon\", \"Nantes\", \"Pau\"]\n&gt;&gt;&gt; df\n        Paris  Lyon  Nantes  Pau\nchat       10    11      12   13\nsinge      20    21      22   23\nsouris     30    31      32   33\n</code></pre>"},{"location":"pages/panda/#dataframe-selection","title":"Dataframe S\u00e9lection","text":""},{"location":"pages/panda/#selection-de-colonnes","title":"S\u00e9lection de colonnes","text":"<p>On peut s\u00e9lectionner une colonne par son \u00e9tiquette :</p> <pre><code>&gt;&gt;&gt; df[\"Lyon\"]\nchat      11\nsinge     21\nsouris    31\n</code></pre> <p>ou plusieurs colonnes en m\u00eame temps :</p> <pre><code>&gt;&gt;&gt; df[[\"Lyon\", \"Pau\"]]\n        Lyon  Pau\nchat      11   13\nsinge     21   23\nsouris    31   33\n</code></pre>"},{"location":"pages/panda/#selection-de-lignes","title":"S\u00e9lection de lignes","text":"<p>Pour s\u00e9lectionner une ligne, il faut utiliser l'instruction .loc() et l'\u00e9tiquette de la ligne :  </p> <pre><code>&gt;&gt;&gt; df.loc[\"singe\"]\nParis     20\nLyon      21\nNantes    22\nPau       23\nName: singe, dtype: int64\n</code></pre> <p>Ici aussi, on peut s\u00e9lectionner plusieurs lignes :</p> <pre><code>&gt;&gt;&gt; df.loc[[\"singe\", \"chat\"]]\n       Paris  Lyon  Nantes  Pau\nsinge     20    21      22   23\nchat      10    11      12   13\n</code></pre> <p>Enfin, on peut aussi s\u00e9lectionner des lignes avec l'instruction .iloc et l'indice de la ligne (la premi\u00e8re ligne ayant l'indice 0) :  </p> <pre><code>&gt;&gt;&gt; df.iloc[1]\nParis     20\nLyon      21\nNantes    22\nPau       23\nName: singe, dtype: int64\n\n&gt;&gt;&gt; df.iloc[[1,0]]\n       Paris  Lyon  Nantes  Pau\nsinge     20    21      22   23\nchat      10    11      12   13\n</code></pre> <p>On peut \u00e9galement utiliser les tranches (comme pour les listes) : </p> <pre><code>&gt;&gt;&gt; df.iloc[0:2]\n       Paris  Lyon  Nantes  Pau\nchat      10    11      12   13\nsinge     20    21      22   23\n</code></pre>"},{"location":"pages/panda/#selection-de-lignes-et-colonnes","title":"S\u00e9lection de lignes ET colonnes","text":"<p>On peut combiner les deux types de s\u00e9lection (en ligne et en colonne): <pre><code>&gt;&gt;&gt; df.loc[\"souris\", \"Pau\"]\n33\n&gt;&gt;&gt; df.loc[[\"singe\", \"souris\"], ['Nantes', 'Lyon']]\n        Nantes  Lyon\nsinge       22    21\nsouris      32    31\n</code></pre></p>"},{"location":"pages/panda/#selection-par-condition","title":"S\u00e9lection par condition","text":"<p>S\u00e9lectionnons maintenant toutes les lignes pour lesquelles les effectifs \u00e0 Pau sont &gt; \u00e0 15</p> <pre><code>&gt;&gt;&gt; df[ df[\"Pau\"]&gt;15 ]\n</code></pre> <p>De cette s\u00e9lection, on ne souhaite garder que les valeurs pour Lyon :</p> <pre><code>&gt;&gt;&gt; df[ df[\"Pau\"]&gt;15 ][\"Lyon\"]\n</code></pre> <p>On peut aussi combiner plusieurs conditions avec &amp; pour l'op\u00e9rateur et :</p> <pre><code>&gt;&gt;&gt; df[ (df[\"Pau\"]&gt;15) &amp; (df[\"Lyon\"]&gt;25) ]\n</code></pre> <p>et | pour l'op\u00e9rateur ou :</p> <pre><code>&gt;&gt;&gt; df[ (df[\"Pau\"]&gt;15) | (df[\"Lyon\"]&gt;25) ]\n</code></pre>"},{"location":"pages/panda/#pratique-12-statistiques-par-groupe","title":"Pratique 12 : Statistiques par groupe","text":"<p>Cr\u00e9er un programme python <code>exo-pandas-stats.py</code> qui prenne en input le fichier <code>transferrin_report.csv</code> et qui calcule la taille et la masse mol\u00e9culaire moyennes des transferrines.</p> <ul> <li> <p>explorer les fonctions <code>.groupby()</code> et <code>.mean()</code> pour le faire</p> </li> <li> <p>Calculer la valeur minimale et maximale de la longueur et de la masse mol\u00e9culaire explore les fonctions  <code>.pivot_table()</code></p> </li> </ul>"},{"location":"pages/panda/#combinaison-de-dataframes","title":"Combinaison de dataframes","text":"<p>Combinaison de dataframes</p> <p>df1  <pre><code>         Lyon  Paris\nchat      10      3\nsinge     23     15\nsouris    17     20\n</code></pre></p> <p>df2  <pre><code>          Nantes  Strasbourg\nchat         3           5\nsouris       9          10\nlapin       14           8\n</code></pre></p> <p>pour concatener les deux df</p> <pre><code>&gt;&gt;&gt;pd.concat([df1, df2])\n</code></pre> <p>pour les concatener mais en mettant en commun les lignes des deux df</p> <pre><code>&gt;&gt;&gt; pd.concat([df1, df2], axis=1)\n</code></pre> <p>conserver que les lignes communes aux deux dataframes</p> <pre><code>&gt;&gt;&gt; pd.concat([df1, df2], axis=1, join=\"inner\")\n</code></pre>"},{"location":"pages/panda/#pratique-13-concatener","title":"Pratique 13 : Concatener","text":"<p>Cr\u00e9er un programme python exo-pandas-concatener.py qui cree les deux df :  </p> <p>df1  <pre><code>         Lyon  Paris\nchat      10      3\nsinge     23     15\nsouris    17     20\n</code></pre></p> <p>df2 <pre><code>          Nantes  Strasbourg\nchat         3           5\nsouris       9          10\nlapin       14           8\n</code></pre></p> <p>et qui les concatene ! </p>"},{"location":"pages/passage_arguments/","title":"Passage d'arguments","text":""},{"location":"pages/passage_arguments/#passage-darguments","title":"Passage d'arguments","text":"<p>Exemples</p> <pre><code>note1 = input(\"Donner une note : \")\nnote2 = input(\"Donner une note : \")\nnote3 = input(\"Donner une note : \")\nmoy = (int(note1)+int(note3)+int(note2))/3\nprint (\"La moyenne est \",moy)\n</code></pre> <p>On souhaite passer les valeurs <code>note1</code>, <code>note2</code>, <code>note3</code> en argument au programme</p> <p>Exemples</p> <pre><code>liste_animaux = ['vache','souris','levure','bacterie']\nfor nom in listeAnimaux:\nprint(nom)\n</code></pre> <p>On souhaite passer <code>liste_animaux</code> en argument au programme</p> <p>Jusqu'\u00e0 pr\u00e9sent, on utilise des donn\u00e9es fixes ou demand\u00e9es \u00e0 l'utilisateur avec <code>input()</code>.</p> <p>On veut passer des arguments/param\u00e8tres au programme :  </p> <ul> <li>pour permettre l'ex\u00e9cution du programme avec diff\u00e9rentes donn\u00e9es sans avoir \u00e0 modifier le script</li> <li>pour \u00e9viter l'interaction avec l'utilisateur</li> </ul> <p></p> <p>R\u00e9cup\u00e9rer les valeurs pass\u00e9es en argument au programme : Utilisation de la liste <code>sys.argv</code> du module sys (<code>import sys</code>)</p> <ul> <li><code>sys.argv[0]</code> \u21d2 nom du programme</li> <li><code>sys.argv[1]...sys.argv[n]</code> \u21d2 valeurs des arguments</li> </ul> <p>Exemple pour la commande <code>python exo3.py 15 17 8</code> :</p> <ul> <li><code>sys.argv[0]</code> est \u00e9gal \u00e0 \"exo3.py\"</li> <li><code>sys.argv[1]</code> est \u00e9gal \u00e0 \"15\"</li> <li><code>sys.argv[2]</code> est \u00e9gal \u00e0 \"17\"</li> <li><code>sys.argv[3]</code> est \u00e9gal \u00e0 \"8\"</li> </ul> <p>V\u00e9rifier qu'on a le bon nombre d'arguments = taille de <code>sys.argv</code></p> <p>Si on a 3 arguments, alors <code>len(sys.argv) == 4</code></p> <p>Si on a pas le bon nombre, quitter le programme : <pre><code>sys.exit()\n</code></pre> sortie normale <pre><code>sys.exit(\"Message d'erreur\")\n</code></pre> sortie avec erreur (met le code d'erreur du shell \u00e0 1)</p>"},{"location":"pages/passage_arguments/#pratique-5-le-passage-de-parametre","title":"Pratique 5 : le passage de param\u00e8tre","text":"<ul> <li> <p>Reprendre le programme <code>exo4_a.py</code> et cr\u00e9er un nouveau programme python <code>exo5_arg.py</code> qui permettra de donner la s\u00e9quence nucl\u00e9ique \u00e9tudi\u00e9e en argument du programme.</p> </li> <li> <p>Modifier le programme pr\u00e9c\u00e9dent <code>exo5_arg.py</code> afin de v\u00e9rifier la pr\u00e9sence du bon nombre d'arguments</p> </li> <li> <p>Cr\u00e9er un programme python <code>exo5_comp.py</code> qui permet de comparer 2 s\u00e9quences donn\u00e9es en argument et qui affiche le nombre de r\u00e9sidus/nucl\u00e9otides identiques \u00e0 la m\u00eame position entre les 2 s\u00e9quences (on consid\u00e8re que les 2 s\u00e9quences sont de m\u00eame longueur)</p> <p>Exemple : - avec les s\u00e9quences <code>ATTGCTA</code> et <code>ATTGCTC</code>, le programme doit afficher 6 r\u00e9sidus identiques - avec les s\u00e9quences <code>TAATTGT</code> et <code>ATTGCTC</code>, le programme doit afficher 0 r\u00e9sidus identiques</p> </li> <li> <p>Modifier le programme pr\u00e9c\u00e9dent <code>exo5_comp.py</code> afin d'afficher le pourcentage d'identit\u00e9 (nb r\u00e9sidu identique / nb de r\u00e9sidu total)</p> </li> <li> <p>Modifier le programme pr\u00e9c\u00e9dent <code>exo5_comp.py</code> afin d'autoriser des s\u00e9quences de longueurs diff\u00e9rentes</p> </li> </ul>"},{"location":"pages/structures_conditionnelles/","title":"Structures conditionnelles","text":""},{"location":"pages/structures_conditionnelles/#structures-conditionnelles","title":"Structures conditionnelles","text":"<p>Permet d'ex\u00e9cuter du code diff\u00e9rent en fonction du r\u00e9sultat d'une ou plusieurs conditions/tests</p> <p></p>"},{"location":"pages/structures_conditionnelles/#indentation-en-python","title":"Indentation en Python","text":"<p>Contrairement \u00e0 la plupart des autres langages, les Blocs de code (conditions, boucles, fonctions\u2026) sont d\u00e9finis par l'indentation</p> <p></p> <p>Convention : Indenter avec 4 espaces (pas de tabulations)</p>"},{"location":"pages/structures_conditionnelles/#structures-conditionnelles_1","title":"Structures conditionnelles","text":""},{"location":"pages/structures_conditionnelles/#tests","title":"Tests","text":""},{"location":"pages/structures_conditionnelles/#operateurs-de-comparaison","title":"Op\u00e9rateurs de comparaison","text":"<ul> <li><code>==</code>      \u00e9gal \u00e0</li> <li><code>!=</code>      diff\u00e9rent de</li> <li><code>&gt;</code>       strictement sup\u00e9rieur \u00e0</li> <li><code>&gt;=</code>      sup\u00e9rieur ou \u00e9gal \u00e0</li> <li><code>&lt;</code>       strictement inf\u00e9rieur \u00e0</li> <li><code>&lt;=</code>      inf\u00e9rieur ou \u00e9gal \u00e0</li> <li><code>is</code>      est le m\u00eame objet que (utiliser pour v\u00e9rification de type)</li> </ul> <pre><code>x = 3\nif type(x) is int:\n</code></pre> <p>Warning</p> <p>Ne pas confondre : <code>=</code> op\u00e9rateur d'assignation et <code>==</code>    op\u00e9rateur de comparaison</p>"},{"location":"pages/structures_conditionnelles/#operateurs-logiques","title":"Op\u00e9rateurs logiques","text":"<p>Les op\u00e9rateurs de comparaisons renvoient un  bool\u00e9en (<code>bool</code>)</p> <p>On peut combiner plusieurs conditions avec les  op\u00e9rateurs logiques</p> <ul> <li><code>and</code> ET</li> <li><code>or</code>  OU (inclusif)</li> <li><code>not</code> NON</li> </ul> <p></p> <pre><code>age = 32\nif age &gt;= 4 and age &lt;= 99:\n    print(\"Vous pouvez jouer aux legos\")\n</code></pre> Test Result True and True True True and False False False and True False False and False False Test Result True or True True True or False True False or True True False or False False Test Result not True False not False True"},{"location":"pages/structures_conditionnelles/#pratique-2-les-test","title":"Pratique 2: les test","text":"<ul> <li>Cr\u00e9er un programme python exo2.py qui affiche la moyenne de 3 notes donn\u00e9es par l'utilisateur.</li> </ul> <p>Voici le code python3 pour demander 3 valeurs \u00e0 l'utilisateur qui seront stock\u00e9es dans les variables note1\\, note2\\, note3</p> <pre><code>note1 = input\\(\"Donner une note : \"\\)\nnote2 = input\\(\"Donner une note : \"\\)\nnote3 = input\\(\"Donner une note : \"\\)\n</code></pre> <p>Warning</p> <p>les variables <code>note1</code>, <code>note2</code>, <code>note3</code> sont de type  cha\u00eene de caract\u00e8re  (<code>str</code>)</p> <ul> <li> <p>Modifier ensuite le programme afin qu'il affiche : </p> <p>\"ajourn\u00e9\" si la moyenne est inf\u00e9rieure \u00e0 10 \"passable\" si la moyenne est sup\u00e9rieure ou \u00e9gale \u00e0 10 \"assez bien\" si la moyenne est sup\u00e9rieure ou \u00e9gale \u00e0 12 \"bien\" si la moyenne est sup\u00e9rieure ou \u00e9gale \u00e0 14 \"tr\u00e8s bien\" si la moyenne est sup\u00e9rieure ou \u00e9gale \u00e0 16  </p> </li> </ul> <p>Tips</p> <p>\u00c9crire l\u2019algorithme en commentaire par exemple: <pre><code># on demande a l'utilisateur de rentrer 3 notes qu'on sauvegarde dans 3 variables\n# on doit convertir les valeurs car la fonction input retourne des str()\n</code></pre></p>"},{"location":"pages/subprocess/","title":"Subprocess","text":"<p>On peut vouloir appeler un programme ext\u00e9rieur depuis notre script et r\u00e9cup\u00e9rer sa sortie</p> <p>Module subprocess (<code>import subprocess</code>)</p> <p>Commande \u00e0 donner sous forme de liste de cha\u00eenes de caract\u00e8res, chaque argument \u00e9tant une nouvelle cha\u00eene.</p> <p>Ajouter l'option <code>stdout</code> pour capturer la sortie et <code>text</code> pour automatiquement la d\u00e9coder (comme \u00e0 l'ouverture d'un fichier).</p> <p>Renvoie un objet <code>CompletedProcess</code>, la sortie est accessible sur l'argument <code>.stdout</code>.</p> <pre><code>import subprocess\ncommande = [\"programme\", \"argument1\", \"argument2\"...]\nprocess = subprocess.run(\n        commande,\n        stdout=subprocess.PIPE,\n        text=True\n)\nprint(process.stdout)\n</code></pre> <p>Arguments de subprocess utiles :  </p> <ul> <li> <p><code>stdout=subprocess.PIPE</code> : r\u00e9cup\u00e9rer la sortie standard du programme</p> </li> <li> <p><code>check=True</code> : g\u00e9n\u00e8re une exception si le programme rencontre une erreur (code de sortie \u2260 0)</p> </li> <li> <p><code>shell=True</code> : ex\u00e9cuter la commande dans un shell (pour utiliser les pipes |\u00a0, les redirections &gt;, \u2026). Dans ce cas, la commande doit \u00eatre une cha\u00eene de caract\u00e8res.</p> </li> <li> <p><code>timeout=10</code> : d\u00e9finit un d\u00e9lai d'ex\u00e9cution, en secondes.\u000bUne erreur se produira si le programme d\u00e9passe ce d\u00e9lai.</p> </li> </ul> <p>Consultez la documentation !  https://docs.python.org/3/library/subprocess.html</p>"},{"location":"pages/variables/","title":"Les variables","text":""},{"location":"pages/variables/#typage","title":"typage","text":"<p>Variable : zone de m\u00e9moire dans laquelle on stocke une valeur\u000bUne variable a un nom (ensemble de lettres, chiffres et _)</p> <p>On d\u00e9clare une variable en initialisant : <code>x = 2</code> On peut changer sa valeur avec une affectation : <code>x = x + 3</code></p> <p>Python donne automatiquement un type a chaque variable en fonction de sa nature : </p> <ul> <li><code>w = 1</code>               \u21d2 type <code>int</code> (nombre entier) integer</li> <li><code>x = 3.2</code>             \u21d2 type <code>float</code> (nombre flottant) float</li> <li><code>y = \"hello\"</code>         \u21d2 type <code>str</code> (cha\u00eene de caract\u00e8res)</li> <li><code>z = True</code>            \u21d2 type <code>bool</code> (bool\u00e9en) boolean</li> </ul>"},{"location":"pages/variables/#manipulation","title":"Manipulation","text":"<ul> <li> <p>Sur les nombres : op\u00e9rateurs math\u00e9matiques de base  </p> <ul> <li><code>+</code></li> <li><code>-</code> </li> <li><code>*</code> </li> <li><code>/</code> </li> <li><code>**</code> (puissance)      </li> <li><code>%</code> (modulo)</li> </ul> </li> <li> <p>Sur les cha\u00eenes de caract\u00e8res :</p> <ul> <li><code>+</code>   concat\u00e9nation</li> <li><code>*</code>   r\u00e9p\u00e9tition</li> </ul> </li> </ul> <p><code>type(ma_variable)</code> donne le type de la variable</p> <p>Warning</p> <p>Pas de conversion automatique ! (str + int \u21d2 erreur)  ex : <code>\"Bonjour\" + 10</code>=&gt; erreur Solution:      =&gt; Conversion : <code>int()</code>, <code>float()</code>, <code>str()</code></p>"},{"location":"pages/variables/#nommage","title":"Nommage","text":"<ul> <li> <p>Un nom de variable ne peut pas commencer par un chiffre.  \u00c9viter de commencer avec un <code>_</code></p> </li> <li> <p>Les noms de variables sont sensibles \u00e0 la case (test \u2260 TEST) Utiliser la convention snake_case (sauf noms de classes) <code>ma_longue_variable = 3</code></p> </li> <li> <p>Ne pas utiliser un mot r\u00e9serv\u00e9 comme nom (<code>print</code>, <code>range</code>, <code>from</code>, <code>for</code>, \u2026)</p> </li> <li> <p>Donnez des noms explicites \u00e0 vos variables ! <code>longueur_seq</code> plut\u00f4t que <code>l</code></p> </li> </ul>"},{"location":"pages/vos_propres_fonctions/","title":"Vos propres fonctions","text":"<p>\u00c9crire vos propres fonctions vous permet de rendre un bloc de code r\u00e9utilisable depuis n'importe o\u00f9 dans votre script, autant de fois que n\u00e9cessaire.</p> <p>Avantages : * au lieu de copier coller : on modifie la fonction, cela change le comportement partout o\u00f9 elle est appel\u00e9e * lisibilit\u00e9</p>"},{"location":"pages/vos_propres_fonctions/#syntaxe","title":"Syntaxe","text":"<pre><code>def nom_de_la_fonction(argument_1, argument2):\n    # instructions\u2026\n    return valeur_de_retour\n</code></pre> <p>Note</p> <p>les variables d\u00e9clar\u00e9es dans la fonction ne sont pas accessibles depuis l'ext\u00e9rieur (sauf la valeur de retour) <pre><code>def fonction():\n    x = 3\nprint(x)       # Erreur !!\n</code></pre></p>"},{"location":"pages/vos_propres_fonctions/#pratique-10-creer-mes-propres-fonctions","title":"Pratique 10 : cr\u00e9er mes propres  fonctions","text":"<p>Cr\u00e9er un programme python <code>exo-def.py</code> qui prenne en input une s\u00e9quence et un motif (GC ou  AT ou autre) Le programme doit contenir une fonction valide qui v\u00e9rifie que la s\u00e9quence donn\u00e9e par l\u2019utilisateur est correcte et qui retourne un boolean (<code>True</code> ou <code>False</code>). Si la s\u00e9quence input est valide alors calcule le % du motif pass\u00e9 par l\u2019utilisateur dans une deuxi\u00e8me fonction <code>pourcentage</code>. Le programme doit retourner la phrase suivante: La s\u00e9quence S est valide et le % du motif M est  X%.</p>"},{"location":"pages/pratiques/pratique1/","title":"Pratique 1","text":""},{"location":"pages/pratiques/pratique1/#le-mode-interactif","title":"le mode interactif","text":"<p>En mode interactif, demander \u00e0 l'interpr\u00e9teur de calculer</p> <pre><code>5*6\n10/3\n10.0/3.0\nprint(\"Hello world !\")\n</code></pre> <p>Rappel mode interactif:  </p> <ul> <li>ouvrir un terminal</li> <li>lancer l'interpr\u00e9teur python via la commande  ipython</li> <li>taper les instructions souhait\u00e9es</li> </ul>"},{"location":"pages/pratiques/pratique1/#premier-script","title":"premier script","text":"<p>Cr\u00e9er un programme python qui affiche \"Hello world\"</p> <p>Cr\u00e9er un fichier <code>hello.py</code> avec votre  \u00e9diteur de texte (nano, \u2026)  </p> <ul> <li>Taper l'instruction  <code>print(\"Hello world\")</code>  dans le fichier</li> <li>Enregistrer le fichier</li> <li>Dans le terminal, se d\u00e9placer dans le r\u00e9pertoire o\u00f9 se trouve mon script (commande cd \u2026)</li> <li>Ex\u00e9cuter le script en tapant la commande <code>python3 hello.py</code></li> </ul>"},{"location":"pages/pratiques/pratique10/","title":"Pratique 10 : cr\u00e9er mes propres  fonctions","text":"<p>Cr\u00e9er un programme python <code>exo-def.py</code> qui prenne en input une s\u00e9quence et un motif (GC ou  AT ou autre) Le programme doit contenir une fonction valide qui v\u00e9rifie que la s\u00e9quence donn\u00e9e par l\u2019utilisateur est correcte et qui retourne un boolean (<code>True</code> ou <code>False</code>). Si la s\u00e9quence input est valide alors calcule le % du motif pass\u00e9 par l\u2019utilisateur dans une deuxi\u00e8me fonction <code>pourcentage</code>. Le programme doit retourner la phrase suivante: La s\u00e9quence S est valide et le % du motif M est  X%.</p>"},{"location":"pages/pratiques/pratique2/","title":"Pratique2","text":""},{"location":"pages/pratiques/pratique2/#pratique-2-les-test","title":"Pratique 2: les test","text":"<ul> <li>Cr\u00e9er un programme python exo2.py qui affiche la moyenne de 3 notes donn\u00e9es par l'utilisateur.</li> </ul> <p>Voici le code python3 pour demander 3 valeurs \u00e0 l'utilisateur qui seront stock\u00e9es dans les variables note1\\, note2\\, note3</p> <pre><code>note1 = input\\(\"Donner une note : \"\\)\nnote2 = input\\(\"Donner une note : \"\\)\nnote3 = input\\(\"Donner une note : \"\\)\n</code></pre> <p>Warning</p> <p>les variables <code>note1</code>, <code>note2</code>, <code>note3</code> sont de type  cha\u00eene de caract\u00e8re  (<code>str</code>)</p> <ul> <li> <p>Modifier ensuite le programme afin qu'il affiche : </p> <p>\"ajourn\u00e9\" si la moyenne est inf\u00e9rieure \u00e0 10 \"passable\" si la moyenne est sup\u00e9rieure ou \u00e9gale \u00e0 10 \"assez bien\" si la moyenne est sup\u00e9rieure ou \u00e9gale \u00e0 12 \"bien\" si la moyenne est sup\u00e9rieure ou \u00e9gale \u00e0 14 \"tr\u00e8s bien\" si la moyenne est sup\u00e9rieure ou \u00e9gale \u00e0 16  </p> </li> </ul> <p>Tips</p> <p>\u00c9crire l\u2019algorithme en commentaire par exemple: <pre><code># on demande a l'utilisateur de rentrer 3 notes qu'on sauvegarde dans 3 variables\n# on doit convertir les valeurs car la fonction input retourne des str()\n</code></pre></p>"},{"location":"pages/pratiques/pratique3/","title":"Pratique 3","text":"<p>Soit la liste suivante:     </p> <pre><code>liste_animaux = ['vache','souris','levure','bacterie']\n</code></pre> <p>Cr\u00e9er un programme python <code>exo3_while.py</code> qui affiche l\u2019ensemble des \u00e9l\u00e9ments de liste liste_animaux en utilisant la boucle <code>while</code>.</p> <p>Cr\u00e9er un programme python <code>exo3_for.py</code> qui affiche l\u2019ensemble des \u00e9l\u00e9ments de la liste liste_animaux en utilisant la boucle <code>for</code>.</p> <p>Soit la liste de nombres suivante:  </p> <pre><code>impairs = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]\n</code></pre> <p>Cr\u00e9er un programme python <code>exo3_pair.py</code> qui, \u00e0 partir de la liste impairs, construit une nouvelle liste pairs dans laquelle tous les \u00e9l\u00e9ments de impairs sont incr\u00e9ment\u00e9s de 1. Une fois la nouvelle liste cr\u00e9\u00e9e, l'afficher.</p>"},{"location":"pages/pratiques/pratique4/","title":"Pratique 4","text":"<ul> <li> <p>Cr\u00e9er un programme python <code>exo4_a.py</code> qui \u00e0 partir de la s\u00e9quence nucl\u00e9ique <code>TCTGTTAACCATCCACTTCG</code> (cha\u00eene de caract\u00e8res)  cr\u00e9e sa s\u00e9quence compl\u00e9mentaire inverse, puis l'affiche.</p> </li> <li> <p>Cr\u00e9er un programme python <code>exo4_b.py</code> qui compte le nombre de chacune des bases (A, T, G, C) pr\u00e9sente dans la s\u00e9quence nucl\u00e9ique <code>TCTGTTAACCATCCACTTCG</code>, puis qui affiche ces nombres. Vous ferez une version qui utilise la fonction count() des listes et une autre version qui ne l'utilise pas.</p> </li> <li> <p>Cr\u00e9er un programme python <code>exo4_c.py</code> qui v\u00e9rifie si la sous-s\u00e9quence <code>ATG</code> (codon start) est pr\u00e9sente dans la s\u00e9quence nucl\u00e9ique <code>TCTGTTATGACCATCCACTTCG</code>, puis affiche \"oui\" ou \"non\" en fonction du r\u00e9sultat. Par la suite, modifier le programme pour qu'il affiche \u00e9galement la position de la sous-s\u00e9quence \"ATG\" si elle est pr\u00e9sente.</p> </li> <li> <p>Reprendre l'un des programmes <code>exo4_a.py</code>, <code>exo4_b.py</code> ou <code>exo4_c.py</code> et faire en sorte qu'il fonctionne pour plusieurs s\u00e9quences (les s\u00e9quences seront stock\u00e9es dans une liste et chacune des s\u00e9quences sera analys\u00e9e)</p> <p>Exemple :  <pre><code>seq1= \"ATGCGTAGTCGT\"\nseq2= \"AGGTTCGTATG\"\nmesSeq = [seq1,seq2]\n</code></pre></p> </li> </ul>"},{"location":"pages/pratiques/pratique5/","title":"Pratique 5 : le passage de param\u00e8tre","text":"<ul> <li> <p>Reprendre le programme <code>exo4_a.py</code> et cr\u00e9er un nouveau programme python <code>exo5_arg.py</code> qui permettra de donner la s\u00e9quence nucl\u00e9ique \u00e9tudi\u00e9e en argument du programme.</p> </li> <li> <p>Modifier le programme pr\u00e9c\u00e9dent <code>exo5_arg.py</code> afin de v\u00e9rifier la pr\u00e9sence du bon nombre d'arguments</p> </li> <li> <p>Cr\u00e9er un programme python <code>exo5_comp.py</code> qui permet de comparer 2 s\u00e9quences donn\u00e9es en argument et qui affiche le nombre de r\u00e9sidus/nucl\u00e9otides identiques \u00e0 la m\u00eame position entre les 2 s\u00e9quences (on consid\u00e8re que les 2 s\u00e9quences sont de m\u00eame longueur)</p> <p>Exemple : - avec les s\u00e9quences <code>ATTGCTA</code> et <code>ATTGCTC</code>, le programme doit afficher 6 r\u00e9sidus identiques - avec les s\u00e9quences <code>TAATTGT</code> et <code>ATTGCTC</code>, le programme doit afficher 0 r\u00e9sidus identiques</p> </li> <li> <p>Modifier le programme pr\u00e9c\u00e9dent <code>exo5_comp.py</code> afin d'afficher le pourcentage d'identit\u00e9 (nb r\u00e9sidu identique / nb de r\u00e9sidu total)</p> </li> <li> <p>Modifier le programme pr\u00e9c\u00e9dent <code>exo5_comp.py</code> afin d'autoriser des s\u00e9quences de longueurs diff\u00e9rentes</p> </li> </ul>"},{"location":"pages/pratiques/pratique6/","title":"Pratique 6","text":"<p>Voila une s\u00e9quence au format fasta sequence1.fa</p> <pre><code>&gt;gi|374429558|ref|NR_046237.1| Rattus norvegicus 18S ribosomal RNA (Rn18s), ribosomal RNA\nTACCTGGTTGATCCTGCCAGTAGCATATGCTTGTCTCAAAGATTAAGCCATGCATGTCTAAGTACGCACG\nGCCGGTACAGTGAAACTGCGAATGGCTCATTAAATCAGTTATGGTTCCTTTGGTCGCTCGCTCCTCTCCT\nACTTGGATAACTGTGGTAATTCTAGAGCTAATACATGCCGACGGGCGCTGACCCCCCTTCCCGTGGGGGG\nAACGCGTGCATTTATCAGATCAAAACCAACCCGGTCAGCCCCCTCCCGGCTCCGGCCGGGGGTCGGGCGC\nCGGCGGCTTTGGTGACTCTAGATAACCTCGGGCCGATCGCACGTCCCCGTGGCGGCGACGACCCATTCGA\n</code></pre> <ul> <li> <p>Cr\u00e9er un programme python <code>exo6_a.py</code> qui permet de lire le fichier <code>sequence1.fa</code> (dont le nom est pass\u00e9 en argument) contenant la s\u00e9quence au format fasta et qui affiche cette s\u00e9quence</p> </li> <li> <p>Cr\u00e9er un programme python <code>exo6_b.py</code> qui permet de lire un fichier (dont le nom est pass\u00e9 en argument) contenant la s\u00e9quence au format fasta et qui affiche les r\u00e9sidus de la s\u00e9quence \u00e9crits en minuscule (pas l\u2019en-t\u00eate fasta \"&gt;....\").</p> <p>Exemple d'affichage : <pre><code>tacctggttgatcctgccagtagcatatgcttgtctcaaagattaagccatgcatgtctaagtacgcacg\ngccggtacagtgaaactgcgaatggctcattaaatcagttatggttcctttggtcgctcgctcctctcct\nacttggataactgtggtaattctagagctaatacatgccgacgggcgctgaccccccttcccgtgggggga\n...\n</code></pre></p> </li> <li> <p>Cr\u00e9er un programme python <code>exo6_c.py</code> qui permet de lire un fichier (dont le nom est pass\u00e9 en argument) contenant la s\u00e9quence au format fasta et qui affiche une ligne sur 2 de la s\u00e9quence fasta : ligne 1 puis 3 puis 5 \u2026     Exemple d'affichage :     <pre><code>&gt;gi|374429558|ref|NR_046237.1| Rattus norvegicus 18S ribosomal RNA (Rn18s)\nGCCGGTACAGTGAAACTGCGAATGGCTCATTAAATCAGTTATGGTTCCTTTGGTCGCTCGCTCCTCTCCT\nAACGCGTGCATTTATCAGATCAAAACCAACCCGGTCAGCCCCCTCCCGGCTCCGGCCGGGGGTCGGGCGC\n</code></pre></p> </li> </ul> <p>Details de l\u2019en-t\u00eate d'une s\u00e9quence au format fasta (sequence1.fasta) <pre><code>&gt;gi|374429558|ref|NR_046237.1| Rattus norvegicus 18S ribosomal RNA (Rn18s)\n</code></pre></p> <ul> <li>Cr\u00e9er un programme python <code>exo6_d.py</code> qui permet de lire un fichier (pass\u00e9 en argument) contenant plusieurs s\u00e9quences au format fasta et qui affiche les en-t\u00eates de ces s\u00e9quences.</li> <li> <p>Modifier le programme pr\u00e9c\u00e9dent <code>exo6_d.py</code> pour qu'il cr\u00e9e un fichier r\u00e9sultat ne contenant que les en-t\u00eates des s\u00e9quences fasta (en plus de l'affichage). Le nom du fichier r\u00e9sultat sera pass\u00e9 en argument.</p> <p>Exemple de fichier r\u00e9sultat : <pre><code>&gt;gi|374429558|ref|NR_046237.1| Rattus norvegicus 18S ribosomal RNA (Rn18s)\n&gt;gi|374429558|ref|NR_046237.1| Rattus norvegicus 18S ribosomal RNA (Rn18s)\n&gt;gi|374429558|ref|NR_046237.1| Rattus norvegicus 18S ribosomal RNA (Rn18s)\n&gt;gi|374429558|ref|NR_046237.1| Rattus norvegicus 18S ribosomal RNA (Rn18s)\n</code></pre></p> </li> <li> <p>Cr\u00e9er un programme python <code>exo6_e.py</code> qui permet de lire un fichier (pass\u00e9 en argument) contenant plusieurs s\u00e9quences au format fasta et qui cr\u00e9e un fichier r\u00e9sultat (pass\u00e9 en argument) qui devra contenir uniquement le num\u00e9ro gi et le num\u00e9ro d'accession de chaque s\u00e9quence du fichier d'entr\u00e9e.</p> <p>Exemple de fichier r\u00e9sultat :  <pre><code>seq 1 =&gt; num gi : 374429558, num accession : NR_046237.1\nseq 2 =&gt; num gi : 374429558, num accession : NR_046237.1\nseq 3 =&gt; num gi : 374429558, num accession : NR_046237.1\n</code></pre></p> </li> <li> <p>Cr\u00e9er un programme <code>exo6_f.py</code> qui prend en argument un fichier tabul\u00e9 contenant 2 colonnes num\u00e9riques et \u00e9crit un nouveau fichier tabul\u00e9 en sortie contenant les 2 colonnes originales et une 3\u00e8me colonne contenant leur somme. Les noms des fichiers d\u2019entr\u00e9e et de sortie doivent \u00eatre pris en argument. La premi\u00e8re ligne du fichier tabul\u00e9 est un en-t\u00eate, il faut juste ajouter le nom de la colonne suppl\u00e9mentaire <code>Somme</code>. Un fichier d\u2019entr\u00e9e d\u2019exemple fichier_tabule.tsv est disponible dans les donn\u00e9es du cours.</p> <p>Exemple d'entr\u00e9e : <pre><code>Valeur_1        Valeur_2        \n5               10\n3               22\n</code></pre></p> <p>Exemple de sortie : <pre><code>Valeur_1        Valeur_2        Somme\n5               10              15\n3               22              25\n</code></pre></p> </li> </ul>"},{"location":"pages/pratiques/pratique7/","title":"Pratique7","text":""},{"location":"pages/pratiques/pratique7/#pratique-7","title":"Pratique 7","text":""},{"location":"pages/pratiques/pratique7/#exercice-a","title":"Exercice A","text":"<p>Cr\u00e9er un programme python <code>exo7_a.py</code> qui cr\u00e9er un dictionnaire associant \u00e0 chaque base de l'ADN la chaine \"purinique\" (C et G) ou \"pyrimidinique\" (A et T) selon la base : puis qui demande \u00e0 l'utilisateur (fonction <code>input()</code>) d'entrer une base,  et enfin qui affiche si la base entr\u00e9e par l'utilisateur est purinique ou pyrimidique.</p>"},{"location":"pages/pratiques/pratique7/#exercice-b","title":"Exercice B","text":"<p>En utilisant un dictionnaire et la fonction <code>in</code> (clef in dictionnaire), cr\u00e9er un programme python <code>exo7_b.py</code> qui stocke dans un dictionnaire le nombre d\u2019occurrences de chaque acide amin\u00e9 de la s\u00e9quence <code>AGWPSGGASAGLAILWGASAIMPGALW</code>, puis afficher ce dictionnaire.  </p> <p>Votre programme doit afficher :  </p> <pre><code>{'P': 2, 'I': 2, 'W': 3, 'G': 6, 'L': 3, 'A': 7, 'M': 1, 'S': 3}\n</code></pre>"},{"location":"pages/pratiques/pratique7/#exercice-c","title":"Exercice C","text":"<p>Voila un dictionnaire faisant correspondre \u00e0 chaque esp\u00e8ce la longueur de son g\u00e9nome : </p> <pre><code>dico_espece = {'Escherichia coli':3.6,'Homo sapiens':3200,'Saccharomyces cerevisae':12,'Arabidopsis thaliana':125}\n</code></pre> <p>Cr\u00e9er un programme python <code>exo7_c.py</code> dans lequel vous cr\u00e9ez ce dictionnaire et qui permet d'afficher le nom de l'organisme poss\u00e9dant le plus grand g\u00e9nome.</p>"},{"location":"pages/pratiques/pratique7/#exercice-d","title":"Exercice D","text":"<p>Le fichier sequences_especes.tsv est un fichier tabul\u00e9 (2 colonnes s\u00e9par\u00e9es par des tabulations) contenant un identifiant de s\u00e9quence dans la premi\u00e8re colonne, et l\u2019esp\u00e8ce associ\u00e9e dans la secondes colonne.  <pre><code>Homo sapiens    27292\nSaccharomyces cerevisiae S288C  850883\nHomo sapiens    55226\nMus musculus    19791\n</code></pre></p> <p>Cr\u00e9ez un script <code>exo7_d.py</code> qui lit ce fichier et, \u00e0 l\u2019aide d\u2019un dictionnaire, \u00e9crit un fichier de sortie qui contient le nom d\u2019une esp\u00e8ce pr\u00e9c\u00e9d\u00e9 d\u2019un di\u00e8ze sur une ligne puis tous les identifiants de s\u00e9quence associ\u00e9s \u00e0 cette esp\u00e8ce sur les lignes suivantes.</p> <pre><code># Homo sapiens\n27292\n55226\n....\n# Saccharomyces cerevisiae S288C\n850883\n....\n</code></pre>"},{"location":"pages/pratiques/pratique8/","title":"Pratique 8","text":"<p>On va travailler sur le fichier GenBank sequence.gb</p>"},{"location":"pages/pratiques/pratique8/#exercice-a","title":"Exercice A","text":"<p>Cr\u00e9er un programme python <code>exo8_a.py</code> qui prend en argument (param\u00e8tre) le fichier de s\u00e9quences au format Genbank et qui cr\u00e9e un nouveau fichier avec les s\u00e9quences converties au format fasta.</p>"},{"location":"pages/pratiques/pratique8/#exercice-b","title":"Exercice B","text":"<p>Cr\u00e9er un programme python <code>exo8_b.py</code> qui prend en argument (param\u00e8tre) le fichier de s\u00e9quences au format Genbank et qui donne la longueur de chaque s\u00e9quence en \u00e9crivant \u00e0 l'\u00e9cran pour chaque s\u00e9quence : \"La s\u00e9quence ... a pour longueur ... \"</p>"},{"location":"pages/pratiques/pratique8/#exercice-c","title":"Exercice C","text":"<p>Cr\u00e9er un programme python <code>exo8_c.py</code> qui prend en argument (param\u00e8tre) le fichier de s\u00e9quences au format Genbank et qui cr\u00e9e deux nouveaux fichiers, un avec le compl\u00e9ment inverse des s\u00e9quences au format fasta et un avec les s\u00e9quences traduites en s\u00e9quences prot\u00e9iques au format fasta.</p>"},{"location":"pages/pratiques/pratique9/","title":"Pratique 9","text":""},{"location":"pages/pratiques/pratique9/#exercice-a","title":"Exercice A","text":"<p>Cr\u00e9er un programme python <code>exo9_a.py</code> qui permet de r\u00e9cup\u00e9rer dans la banque de donn\u00e9es Protein du NCBI les s\u00e9quences du g\u00e8ne SRY (<code>SRY [gene]</code>) de l'homme (<code>Homo sapiens[Orgn]</code>) et qui cr\u00e9e un fichier r\u00e9sultat avec les s\u00e9quences au format Genbank (option <code>rettype=\"gb\"</code> de la fonction <code>efetch()</code>). Vous limiterez votre recherche aux 10 premi\u00e8res entr\u00e9es de la banque (option <code>retmax</code> de la fonction <code>esearch()</code>).</p>"},{"location":"pages/pratiques/pratique9/#exercice-b","title":"Exercice B","text":"<p>Cr\u00e9er un programme python <code>exo9_b.py</code> qui permet de faire la m\u00eame chose que le programme pr\u00e9c\u00e9dent mais qui fait en sorte que le nom de la banque de donn\u00e9es du NCBI, le nom du g\u00e8ne et de l'organisme, ainsi que le nom de fichier r\u00e9sultat soient donn\u00e9s en argument \u00e0 votre programme.</p>"},{"location":"pages/pratiques/pratique9/#exercice-c","title":"Exercice C","text":"<p>Cr\u00e9er un programme python <code>exo9_c.py</code> qui \u00e0 partir de 15 s\u00e9quences d'un g\u00e8ne (donn\u00e9 par l'utilisateur en argument) r\u00e9cup\u00e9r\u00e9es sur une banque du NCBI  (donn\u00e9e par l'utilisateur en argument) affiche \u00e0 l'\u00e9cran pour chaque s\u00e9quence : \u00ab s\u00e9quence nom_sequence de longueur lg_sequence \u00bb</p> <p>Par exemple voil\u00e0 l'affichage pour les 3 premi\u00e8res s\u00e9quences r\u00e9cup\u00e9r\u00e9es pour le g\u00e8ne SRY dans la banque Protein du NCBI : <pre><code>sequence EDW99052 de longueur 530\nsequence EDL09053 de longueur 395\nsequence EAX02769 de longueur 204\n</code></pre></p>"}]}